#
# PostgreSQL snippets
#
global !p
def complete_list(t, opts):
	if t:
		opts = [m[len(t):] for m in opts if m.startswith(t)]
	if len(opts) == 1:
		return opts[0]
	return '[' + ','.join(opts) + ']'
def dbobjs():
	return ['function', 'table', 'schema', 'index']
def dbpls():
	return ['plpgsql', 'plpython', 'plpythonu']
def dbtypes():
	return ['text', 'integer', 'bigserial', 'serial', 'json', 'double precision', 'timestamp with time zone']
def dbcnst():
	return ['exception', 'warning', 'notice']
endglobal

snippet select "select statetement" w
select ${1:*} from ${2:table_name}${3: where $4}${5: using $6${7: into $8}};
endsnippet

snippet do "do statetement" w
do language ${1:plpgsql} $${1/^pl(\w+)u?$/$1/}$
$0
$${1/^pl(\w+)u?$/$1/}$;
endsnippet

snippet begin "begin" w
begin
	$0
${1:exception when${2: others} then
	$3
}
end;
endsnippet

snippet raise "raise" w
raise $1`!p snip.rv=complete_list(t[1], dbcnst())` ${2:'%', }$0;
endsnippet

snippet create "create database object" w
create $1`!p snip.rv=complete_list(t[1], dbobjs())`$0
endsnippet

snippet drop "drop database object" w
drop $1`!p snip.rv=complete_list(t[1], dbobjs())`${2: if exists} ${3:name}${4: (${5:arg})}${6: cascade}${0};
endsnippet

snippet if "if condition" w
if ${1:not $2} then
	$0
end if;
endsnippet

snippet execute "execute statetement" w
execute '$0'${1: using ${2}${3: into ${4}}};
endsnippet

snippet function "create function" w
${1:or replace }function ${2:function_name} (${3:fa${4}}) returns ${5:void} language ${6:plpgsql} as $${6/^pl(\w+)u?$/$1/}$
$0
$${6/^pl(\w+)u?$/$1/}$
endsnippet

snippet index "create index" w
index ${1/\w+\."?(\w+)"?/$1/}_$2_inx on ${1:title} (${2:column_name}${3: opclass});
endsnippet

snippet table "create table" w
table${1: if not exists} ${2:table_name} (
	${3:tc${4}}
	$0
);
endsnippet

snippet schema "create schema" w
schema${1: if not exists} ${2:schema_name};
endsnippet

snippet tc "table column definition" w
${2:column_title} $1`!p snip.rv=complete_list(t[1], dbtypes())`${3: not null}${4:,
tc${5}}
endsnippet

snippet fa "function argument" w
${2:arg_title} $1`!p snip.rv=complete_list(t[1], dbtypes())`${3: default ${4}}${5:, fa${6}}
endsnippet
